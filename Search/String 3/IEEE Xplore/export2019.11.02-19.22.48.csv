Document Title,Authors,Author Affiliations,Publication Title,Date Added To Xplore,Publication_Year,Volume,Issue,Start Page,End Page,Abstract,ISSN,ISBNs,DOI,Funding Information,PDF Link,Author Keywords,IEEE Terms,INSPEC Controlled Terms,INSPEC Non-Controlled Terms,Mesh_Terms,Article Citation Count,Patent Citation Count,Reference Count,License,Online Date,Issue Date,Meeting Date,Publisher,Document Identifier
Towards the automatic classification of traceability links,C. Mills,"Department of Computer Science, Florida State University, Tallahassee, USA",2017 32nd IEEE/ACM International Conference on Automated Software Engineering (ASE),,2017,,,1018,1021,"A wide range of text-based artifacts contribute to software projects (e.g., source code, test cases, use cases, project requirements, interaction diagrams, etc.). Traceability Link Recovery (TLR) is the software task in which relevant documents in these various sets are linked to one another, uncovering information about the project that is not available when considering only the documents themselves. This information is helpful for enabling other tasks such as improving test coverage, impact analysis, and ensuring that system or regulatory requirements are met. However, while traceability links are useful, performing TLR manually is time consuming and fraught with error. Previous work has applied Information Retrieval (IR) and other techniques to reduce the human effort involved; however, that effort remains significant. In this research we seek to take the next step in reducing it by using machine learning (ML) classification models to predict whether a candidate link is valid or invalid without human oversight. Preliminary results show that this approach has promise for accurately recommending valid links; however, there are several challenges that still must be addressed in order to achieve a technique with high enough performance to consider it a viable, completely automated solution.",,,10.1109/ASE.2017.8115723,,https://ieeexplore.ieee.org.ezproxy.cdigital.uv.mx:8443/stamp/stamp.jsp?arnumber=8115723,software traceability;traceability link recovery;machine learning,Software;Classification algorithms;Semantics;Predictive models;Measurement;Tuning,information retrieval;learning (artificial intelligence);software maintenance;text analysis,automatic classification;traceability links;software projects;source code;project requirements;interaction diagrams;TLR;software task;relevant documents;test coverage;human effort;machine learning classification models;information retrieval;traceability link recovery,,,,33,,,,,IEEE,IEEE Conferences
Scheduling and control in hybrid data centers,M. Glick; H. Rastegarfar,"College of Optical Sciences, The University of Arizona, 1630 E. University Blvd., Tucson 85721, USA; College of Optical Sciences, The University of Arizona, 1630 E. University Blvd., Tucson 85721, USA",2017 IEEE Photonics Society Summer Topical Meeting Series (SUM),,2017,,,115,116,"We examine the scheduling issues in hybrid electrical/optical data center (DC) networks, considering several implementation requirements. For flexible and programmable resource provisioning, centralized software-defined network (SDN) control can be best complemented with distributed, fast, and accurate flow classification based on machine learning (ML).",,,10.1109/PHOSST.2017.8012677,,https://ieeexplore.ieee.org.ezproxy.cdigital.uv.mx:8443/stamp/stamp.jsp?arnumber=8012677,,Optical switches;Optical fiber networks;Optical packet switching;Image motion analysis;Computer vision;Mice,computer centres;electro-optical devices;learning (artificial intelligence);optical communication equipment;resource allocation;software defined networking;telecommunication scheduling,scheduling issues;hybrid electrical-optical data center networks;flexible resource provisioning;programmable resource provisioning;centralized software-defined network control;flow classification;machine learning,,1,,6,,,,,IEEE,IEEE Conferences
Ambiguous Software Requirement Specification Detection: An Automated Approach,M. H. Osman; M. F. Zaharin,NA; NA,2018 IEEE/ACM 5th International Workshop on Requirements Engineering and Testing (RET),,2018,,,33,40,"Software requirement specification (SRS) document is the most crucial document in software development process. All subsequent steps in software development are influenced by this document. However, issues in requirement, such as ambiguity or incomplete specification may lead to misinterpretation of requirements which consequently, influence the testing activities and higher the risk of time and cost overrun of the project. Finding defects in the initial development phase is crucial since the defect that found late is more expensive than if it was found early. This study describes an automated approach for detecting ambiguous software requirement specification. To this end, we propose the combination of text mining and machine learning. Since the dataset is derived from Malaysian industrial SRS documents, this study only focuses on the Malaysian context. We used text mining for feature extraction and for preparing the training set. Based on this training set, the method `learns' to detect the ambiguous requirement specification. In this paper, we study a set of nine (9) classification algorithms from the machine learning community and evaluate which algorithm performs best to detect the ambiguous software requirement specification. Based on the experiment's result, we develop a working prototype which later is used for our initial validation of our approach. The initial validation shows that the result produced by the classification model is reasonably acceptable. Even though this study is an experimental benchmark, we optimist that this approach may contributes to enhance the quality of SRS.",,,,,https://ieeexplore.ieee.org.ezproxy.cdigital.uv.mx:8443/stamp/stamp.jsp?arnumber=8444122,Software Engineering;Requirement Engineering;Machine Learning;Text Mining,Conferences;Requirements engineering;Testing,data mining;feature extraction;formal specification;learning (artificial intelligence);pattern classification;project management;software development management;software engineering;software quality;text analysis,automated approach;text mining;Malaysian industrial SRS documents;training set;ambiguous software requirement specification detection;software requirement specification document;crucial document;software development process;initial development phase;machine learning;feature extraction;classification algorithms;working prototype;classification model,,,,29,,,,,IEEE,IEEE Conferences
Invited Paper: What is AI Software Testing? and Why,J. Gao; C. Tao; D. Jie; S. Lu,San Jose State University; Nanjing University of Aeronautics and Astronautics; Taiyuan University of Technology; Taiyuan University of Technology,2019 IEEE International Conference on Service-Oriented System Engineering (SOSE),,2019,,,27,2709,"With the fast advance of artificial intelligence technology and data-driven machine learning techniques, building high-quality AI-based software in different application domains is becoming a very hot research topic in both academic and industry communities. Today, many machine learning models and artificial technologies have been developed to build smart application systems based on multimedia inputs to achieve intelligent functional features, such as recommendation, object detection, classification, and prediction, natural language processing and translation, and so on. This brings strong demand in quality validation and assurance for AI software systems. Current research work seldom discusses AI software testing questions, challenges, and validation approaches with clear quality requirements and criteria. This paper focuses on AI software quality validation, including validation focuses, features, and process, and potential testing approaches. Moreover, it presents a test process and a classification-based test modeling for AI classification function testing. Finally, it discusses the challenges, issues, and needs in AI software testing.",;,,10.1109/SOSE.2019.00015,,https://ieeexplore.ieee.org.ezproxy.cdigital.uv.mx:8443/stamp/stamp.jsp?arnumber=8705808,"AI-Testing,-Testing-AI-software,-AI-software-quality-validation.",Software;Software testing;Machine learning;Training;Data models,artificial intelligence;learning (artificial intelligence);object detection;program testing;software quality,AI software testing;artificial intelligence technology;data-driven machine learning techniques;high-quality AI-based software;academic industry communities;machine learning models;artificial technologies;smart application systems;intelligent functional features;natural language processing;translation;AI software systems;clear quality requirements;AI software quality validation;test process;classification-based test modeling;AI classification function testing;application domains,,,,31,,,,,IEEE,IEEE Conferences
Let’s Hear it from RETTA: A Requirements Elicitation Tool for TrAffic Management Systems,M. Noaeen; Z. S. H. Abad; B. H. Far,"Dept. of Electr. & Comput. Eng., Univ. of Calgary, Calgary, AB, Canada; Dept. of Comput. Sci., Univ. of Calgary, Calgary, AB, Canada; Dept. of Electr. & Comput. Eng., Univ. of Calgary, Calgary, AB, Canada",2017 IEEE 25th International Requirements Engineering Conference (RE),,2017,,,450,451,"The area of Traffic Management (TM) is characterized by uncertainty, complexity, and imprecision. The complexity of software systems in the TM domain which contributes to a more challenging Requirements Engineering (RE) job mainly stems from the diversity of stakeholders and complexity of requirements elicitation in this domain. This work brings an interactive solution for exploring functional and non-functional requirements of software-reliant systems in the area of traffic management. We prototyped the RETTA tool which leverages the wisdom of the crowd and combines it with machine learning approaches such as Natural Language Processing and Naïve Bayes to help with the requirements elicitation and classification task in the TM domain. This bridges the gap among stakeholders from both areas of software development and transportation engineering. The RETTA prototype is mainly designed for requirements engineers and software developers in the area of TM and can be used on Android-based devices.",,,10.1109/RE.2017.78,,https://ieeexplore.ieee.org.ezproxy.cdigital.uv.mx:8443/stamp/stamp.jsp?arnumber=8049156,Requirements Engineering;Transportation Management;Tool Development;Traffic Signal Timing,Tools;Transportation;Complexity theory;Data analysis;Prototypes;Computational modeling;Requirements engineering,Android (operating system);Bayes methods;formal specification;graphical user interfaces;learning (artificial intelligence);natural language processing;pattern classification;systems analysis;traffic engineering computing,TM domain;software development;transportation engineering;software systems;nonfunctional requirements;software-reliant systems;RETTA tool;machine learning approaches;Natural Language Processing;requirements engineering;requirements elicitation tool-for-traffic management systems;functional requirements;naïve Bayes method;Android-based devices,,4,,7,,,,,IEEE,IEEE Conferences
A Systematic Approach of Dataset Definition for a Supervised Machine Learning Using NFR Framework,M. Marinho; D. Arruda; F. Wanderley; A. Lins,"Centro de Cienc. e Tecnol., Univ. Catolica de Pernambuco, Recife, Brazil; Centro de Cienc. e Tecnol., Univ. Catolica de Pernambuco, Recife, Brazil; Centro de Cienc. e Tecnol., Univ. Catolica de Pernambuco, Recife, Brazil; Centro de Cienc. e Tecnol., Univ. Catolica de Pernambuco, Recife, Brazil",2018 11th International Conference on the Quality of Information and Communications Technology (QUATIC),,2018,,,110,118,"Non-functional requirements describe important constraints upon the software development and should therefore be considered and specified as early as possible during the system analysis. Effective elicitation of requirements is arguably among the most important of the resulting recommended RE practices. Recent research has shown that artificial intelligence techniques such as Machine Learning and Text Mining perform the automatic extraction and classification of quality attributes from text documents with relevant results. This paper aims to define a systematic process of dataset generation through NFR Framework catalogues improving the NFR's classification process using Machine Learning techniques. A well-known dataset (Promise) was used to evaluate the precision of our approach reaching interesting results. Regarding to security and performance we obtained a precision and recall ranging between ~85% and ~98%. And we achievement a F1 above ~79% when classified the security, performance and usability together.",,,10.1109/QUATIC.2018.00024,,https://ieeexplore.ieee.org.ezproxy.cdigital.uv.mx:8443/stamp/stamp.jsp?arnumber=8590177,non-fucntional requirements;NFR framework;artificial inteligence;machine learning;SIG,Machine learning;Systematics;Security;Requirements engineering;Usability,data mining;formal specification;formal verification;learning (artificial intelligence);pattern classification;systems analysis;text analysis,systematic approach;dataset definition;nonfunctional requirements;software development;system analysis;artificial intelligence techniques;automatic extraction;text documents;systematic process;dataset generation;NFR's classification process;text mining;supervised machine learning techniques,,,,44,,,,,IEEE,IEEE Conferences
A novel probabilistic-ABC based boosting model for software defect detection,P. R. Kumar; G. P. S. Varma,"Department of CSE, Sir C R R College of engineering, Eluru, India; Sagi Ramakrishnam Raju Engineering College, Bhimavaram, West Godavari District, India","2017 International Conference on Innovations in Information, Embedded and Communication Systems (ICIIECS)",,2017,,,1,6,"As the development platforms in software technology grow rapidly; the development of software systems has become more and more complex and versatile. It is quite necessary for the software industries to develop software products with good qualities. As the size of the product and development technologies increasing, there is need for identification of software defects at the early stage of development phase. Detection of defects appropriately and accurately measured in the early stage to increase the quality of the product. Software metric can be defined as building blocks of prediction models. The evaluation of software metric is carried out in the design and coding phase prior to actual implementation of the product. Defects are described as a type of conditions that does not satisfy minimum requirement and this can lead to malfunction or unexpected outcomes. The numbers of defects are inversely proportional with the quality which means, on decreasing numbers of defects will result better software quality. Detection of these defects at the early stage of development life cycle will reduce the cost and effort to a great extent. Since decades many researchers have proposed different models for detection of defects in software modules. In this paper we emphasized on defect detection approaches using machine learning scheme to improve true positive rate. Prediction metrics are basically split into two categories, those are: - code metrics and process metrics. In this paper we have designed and implemented a novel defect prediction model using probabilistic ABC based classification model. We compared our model with various defect detection approaches in terms of statistical measures. Experimental results proved that proposed model has high computational detection rate compared to traditional models.",,,10.1109/ICIIECS.2017.8276059,,https://ieeexplore.ieee.org.ezproxy.cdigital.uv.mx:8443/stamp/stamp.jsp?arnumber=8276059,Software defects;Machine learning;feature selection models,Software;Predictive models;Computational modeling;Software metrics;Feature extraction;Genetic algorithms,cost reduction;DP industry;learning (artificial intelligence);pattern classification;program testing;software metrics;software quality;statistical analysis,software defect detection;development platforms;software technology;development technologies;early stage;development phase;software metric;prediction models;coding phase;development life cycle;software modules;defect detection approaches;prediction metrics;code metrics;process metrics;probabilistic ABC based classification model;high computational detection rate;traditional models;software system development;software product quality;software defect identification;design phase;probabilistic-ABC based boosting model;software industries;cost reduction;cost reduction;machine learning scheme;true positive rate;defect prediction model;statistical measures,,,,12,,,,,IEEE,IEEE Conferences
Weka meets TraceLab: Toward convenient classification: Machine learning for requirements engineering problems: A position paper,J. H. Hayes; W. Li; M. Rahimi,"Computer Science Department University of Kentucky Lexington, Kentucky, USA; Computer Science Department University of Kentucky Lexington, Kentucky, USA; School of Computing DePaul University Chicago, Illinois, USA",2014 IEEE 1st International Workshop on Artificial Intelligence for Requirements Engineering (AIRE),,2014,,,9,12,"Requirements engineering encompasses many difficult, overarching problems inherent to its subareas of process, elicitation, specification, analysis, and validation. Requirements engineering researchers seek innovative, effective means of addressing these problems. One powerful tool that can be added to the researcher toolkit is that of machine learning. Some researchers have been experimenting with their own implementations of machine learning algorithms or with those available as part of the Weka machine learning software suite. There are some shortcomings to using “one off” solutions. It is the position of the authors that many problems exist in requirements engineering that can be supported by Weka's machine learning algorithms, specifically by classification trees. Further, the authors posit that adoption will be boosted if machine learning is easy to use and is integrated into requirements research tools, such as TraceLab. Toward that end, an initial concept validation of a component in TraceLab is presented that applies the Weka classification trees. The component is demonstrated on two different requirements engineering problems. Finally, insights gained on using the TraceLab Weka component on these two problems are offered.",,,10.1109/AIRE.2014.6894850,,https://ieeexplore.ieee.org.ezproxy.cdigital.uv.mx:8443/stamp/stamp.jsp?arnumber=6894850,Artificial intelligence;machine learning;requirements engineering;classification;decision trees;TraceLab;Weka,Classification tree analysis;Classification algorithms;Machine learning algorithms;Educational institutions;Software;Supervised learning,decision trees;formal specification;learning (artificial intelligence);pattern classification,TraceLab Weka component;Weka classification trees;requirements research tools;one off solutions;requirements engineering problems;Weka machine learning software suite,,4,,12,,,,,IEEE,IEEE Conferences
Semi-Automated Extraction of New Requirements from Online Reviews for Software Product Evolution,J. Buchan; M. Bano; D. Zowghi; P. Volabouth,"Auckland Univ. of Technol., Auckland, New Zealand; Swinburne Univ. of Technol., Melbourne, VIC, Australia; Univ. of Technol. Sydney, Sydney, NSW, Australia; Auckland Univ. of Technol., Auckland, New Zealand",2018 25th Australasian Software Engineering Conference (ASWEC),,2018,,,31,40,"In order to improve and increase their utility, software products must evolve continually and incrementally to meet the new requirements of current and future users. Online reviews from users of the software provide a rich and readily available resource for discovering candidate new features for future software releases. However, it is challenging to manually analyze a large volume of potentially unstructured and noisy data to extract useful information to support software release planning decisions. This paper investigates machine learning techniques to automatically identify text that represents users' ideas for new features from their online reviews. A binary classification approach to categorize extracted text as either a feature or non-feature was evaluated experimentally. Three machine learning algorithms were evaluated in the experiments: Naïve Bayes (with multinomial and Bernoulli variants), Support Vector Machines (with linear and multinomial variants) and Logistic Regression. Variations on the configurations of k-fold cross validation, the use of n-grams and review sentiment were also experimentally evaluated. Based on binary classification of over a thousand separate reviews of two products, Trello and Jira, linear Support Vector Machines with review sentiment as an input, using n-gram (1,4) together with k-fold 10 cross validation gave the best performance. The results have confirmed the feasibility and accuracy of semi-automated extraction of candidate requirements from a large volume of unstructured and noisy online user reviews. The next steps planned are to experiment with machine supported grouping, prioritizing and visualizing the extracted features to best support release planners' work, as well as extending the sources of candidate requirements.",;,,10.1109/ASWEC.2018.00013,,https://ieeexplore.ieee.org.ezproxy.cdigital.uv.mx:8443/stamp/stamp.jsp?arnumber=8587284,Software requirements;Feature request;Software product line;Online reviews,Feature extraction;Software;Measurement;Semantics;Support vector machines;Ontologies;Data mining,Bayes methods;feature extraction;learning (artificial intelligence);natural language processing;pattern classification;regression analysis;software development management;support vector machines;text analysis,online reviews;software product evolution;software products;future software releases;potentially unstructured data;noisy data;software release planning decisions;binary classification approach;extracted text;machine learning algorithms;multinomial variants;Bernoulli variants;k-fold cross validation;review sentiment;thousand separate reviews;semiautomated extraction;candidate requirements;unstructured user reviews;noisy online user reviews;machine supported grouping;support release planners;linear support vector machines,,,,35,,,,,IEEE,IEEE Conferences
Logic-Based Learning in Software Engineering,D. Alrajeh; A. Russo; S. Uchitel; J. Kramer,"Imperial Coll. London, London, UK; Imperial Coll. London, London, UK; Imperial Coll. London, London, UK; Imperial Coll. London, London, UK",2016 IEEE/ACM 38th International Conference on Software Engineering Companion (ICSE-C),,2016,,,892,893,"In recent years, research efforts have been directed towards the use of Machine Learning (ML) techniques to support and automate activities such as program repair, specification mining and risk assessment. The focus has largely been on techniques for classification, clustering and regression. Although beneficial, these do not produce a declarative, interpretable representation of the learned information. Hence, they cannot readily be used to inform, revise and elaborate software models. On the other hand, recent advances in ML have witnessed the emergence of new logic-based learning approaches that differ from traditional ML in that their output is represented in a declarative, rule-based manner, making them well-suited for many software engineering tasks. In this technical briefing, we will introduce the audience to the latest advances in logic-based learning, give an overview of how logic-based learning systems can successfully provide automated support to a variety of software engineering tasks, demonstrate the application to two real case studies from the domain of requirements engineering and software design and highlight future challenges and directions.",,,,,https://ieeexplore.ieee.org.ezproxy.cdigital.uv.mx:8443/stamp/stamp.jsp?arnumber=7883431,,Software engineering;Requirements engineering;Maintenance engineering;Learning systems;Software systems;Computational modeling,formal specification;formal verification;learning (artificial intelligence);pattern classification;pattern clustering;regression analysis,logic-based learning;software engineering;machine learning;ML techniques;program repair;specification mining;risk assessment;software models;declarative rule-based manner;requirements engineering;software design,,,,10,,,,,IEEE,IEEE Conferences
Preprocessing Role in Analyzing Tweets Towards Requirement Engineering,A. M. Ebrahimi; A. A. Barforoush,"Dept. Computer and Information Technology Engineering, Amirkabir University of Technology, Tehran, Iran; Dept. Computer and Information Technology Engineering, Amirkabir University of Technology, Tehran, Iran",2019 27th Iranian Conference on Electrical Engineering (ICEE),,2019,,,1905,1911,"Twitter is an important source for crowdsourcing software requirements and can be used as a communication channel between technical stakeholders and end users of software products. Previous studies have shown that software users share their opinions about the software through short messages called tweets. These tweets might contain worthwhile information (such as bug reports and user requests) which relates to the software requirements. Machine learning and Natural language processing approaches have been applied to elicit these technical tweets. Particularly, when learning techniques are considered, the success rate of the preprocessing process to overcome shortcomings in analyzing tweets becomes crucial. Therefore, in this paper, we propose a method which involves more than 6000 experiments in order to systematically analyze the effects of eleven preprocessing techniques on the classification performance of requirements-related tweets. We train and test three popular supervised learning algorithms on a dataset of 4000 tweets which is a sample of twitter feeds. Finally, we analyze our evaluation results from three different viewpoints to answer the research question. Our findings have demonstrated the crucial role of preprocessing, and also are feasible to provide more insights in designing approaches which can deal more accurately in case of elicitation such tweets.",;,,10.1109/IranianCEE.2019.8786652,,https://ieeexplore.ieee.org.ezproxy.cdigital.uv.mx:8443/stamp/stamp.jsp?arnumber=8786652,Twitter;User Feedback;Crowd RE;Requirement Elicitation;Data-driven Requirements Engineering;Software Evolution;Text Preprocessing,Software;Twitter;Computer bugs;Terminology;Electrical engineering;Tagging;Stakeholders,information analysis;learning (artificial intelligence);social networking (online);software engineering,requirements-related tweets;crowdsourcing software requirements;technical stakeholders;software products;software users;machine learning;learning techniques;supervised learning algorithms;natural language processing approach;tweet analysis,,,,18,,,,,IEEE,IEEE Conferences
A Framework for QoS-aware Traffic Classification Using Semi-supervised Machine Learning in SDNs,P. Wang; S. Lin; M. Luo,"Dept. of Electr. Eng. & Comput. Sci., Wichita State Univ., Wichita, KS, USA; Sch. of Electr. & Comput. Eng., Georgia Inst. of Technol., Atlanta, GA, USA; NA",2016 IEEE International Conference on Services Computing (SCC),,2016,,,760,765,"In this paper, a QoS-aware traffic classification framework for software defined networks is proposed. Instead of identifying specific applications in most of the previous work of traffic classification, our approach classifies the network traffic into different classes according to the QoS requirements, which provide the crucial information to enable the fine-grained and QoS-aware traffic engineering. The proposed framework is fully located in the network controller so that the real-time, adaptive, and accurate traffic classification can be realized by exploiting the superior computation capacity, the global visibility, and the inherent programmability of the network controller. More specifically, the proposed framework jointly exploits deep packet inspection (DPI) and semi-supervised machine learning so that accurate traffic classification can be realized, while requiring minimal communications between the network controller and the SDN switches. Based on the real Internet data set, the simulation results show the proposed classification framework can provide good performance in terms of classification accuracy and communication costs.",,,10.1109/SCC.2016.133,,https://ieeexplore.ieee.org.ezproxy.cdigital.uv.mx:8443/stamp/stamp.jsp?arnumber=7557524,Traffic classification;SDN;QoS;Semi-supervised,Quality of service;Real-time systems;Engines;Training;Control systems;Classification algorithms;Support vector machines,learning (artificial intelligence);quality of service;software defined networking,QoS aware traffic classification framework;semisupervised machine learning;SDN;software defined networks;network traffic;QoS aware traffic engineering;network controller;deep packet inspection;DPI,,30,,20,,,,,IEEE,IEEE Conferences
Predicting software defects: A cost-sensitive approach,M. E. R. Bezerra; A. L. I. Oliveiray; P. J. L. Adeodatoz,"Center of Informatics, Federal University of Pernambuco, UFPE, Recife PE, Brazil, 50.732-970; Center of Informatics, Federal University of Pernambuco, UFPE, Recife PE, Brazil, 50.732-970; Center of Informatics, Federal University of Pernambuco, UFPE, Recife PE, Brazil, 50.732-970","2011 IEEE International Conference on Systems, Man, and Cybernetics",,2011,,,2515,2522,"Find software defects is a complex and slow task which consumes most of the development budgets. In order to try reducing the cost of test activities, many researches have used machine learning to predict whether a module is defect-prone or not. Defect detection is a cost-sensitive task whereby a misclassification is more costly than a correct classification. Yet, most of the researches do not consider classification costs in the prediction models. This paper introduces an empirical method based in a COCOMO (COnstructive COst MOdel) that aims to assess the cost of each classifier decision. This method creates a cost matrix that is used in conjunction with a threshold-moving approach in a ROC (Receiver Operating Characteristic) curve to select the best operating point regarding cost. Public data sets from NASA (National Aeronautics and Space Administration) IV&V (Independent Verification & Validation) Facility Metrics Data Program (MDP) are used to train the classifiers and to provide some development effort information. The experiments are carried out through a methodology that complies with validation and reproducibility requirements. The experimental results have shown that the proposed method is efficient and allows the interpretation of the classifier performance in terms of tangible cost values.",;,,10.1109/ICSMC.2011.6084055,,https://ieeexplore.ieee.org.ezproxy.cdigital.uv.mx:8443/stamp/stamp.jsp?arnumber=6084055,Defect prediction;machine learning;pattern recognition;testing costs;ROC curve;software metrics;MDP;NASA;COCOMO,Software;Testing;Training;Mathematical model;Equations;NASA;Neurons,cost reduction;learning (artificial intelligence);matrix algebra;program debugging;program testing;software cost estimation,software defect prediction;cost-sensitive approach;cost reduction;machine learning;defect detection;empirical method;constructive cost model;cost matrix;threshold-moving approach;receiver operating characteristic curve,,7,,24,,,,,IEEE,IEEE Conferences
Software Requirements Engineering through Machine Learning Techniques: A Literature Review,M. G. Gramajo; L. Ballejos; M. Ale,"CIDISI, Centro de Investigación y Desarrollo de Ingeniería en Sistemas de Información, CONICET-UTN Santa Fe, Argentina; CIDISI, Centro de Investigación y Desarrollo de Ingeniería en Sistemas de Información, CONICET-UTN Santa Fe, Argentina; CIDISI, Centro de Investigación y Desarrollo de Ingeniería en Sistemas de Información, CONICET-UTN Santa Fe, Argentina",2018 IEEE Biennial Congress of Argentina (ARGENCON),,2018,,,1,7,"In recent years, Machine Learning (AA) has shown potential for the development of better tools and software products. In relation to this situation, there are several proposals in the literature that demonstrate the application of AA techniques to address the activities and challenges that arise in Requirements Engineering (ER). This paper presents a systematic mapping of the literature in order to provide a comprehensive review of research detailing the uses and applications of AA for new perspectives and solutions to the problems present in ER. The results obtained highlight encouraging proposals mainly oriented to the prediction of failures and classification of requirements. However, they still need further empirical validation to be widely accepted and applied in software development environments. Consequently, this situation denotes the need to continue researching and deepening the possible applications of AA techniques in the area of ER.",,,10.1109/ARGENCON.2018.8646010,,https://ieeexplore.ieee.org.ezproxy.cdigital.uv.mx:8443/stamp/stamp.jsp?arnumber=8646010,Aprendizaje Automático;Aprendizaje Supervisado;Ingeniería de Requerimientos,Software;Requirements engineering;Machine learning;Supervised learning;Erbium;Proposals;Bibliographies,learning (artificial intelligence);software engineering;systems analysis,software products;AA techniques;systematic mapping;software development environments;software requirements engineering;machine learning techniques,,,,34,,,,,IEEE,IEEE Conferences
A Needle in a Haystack: What Do Twitter Users Say about Software?,E. Guzman; R. Alkadhi; N. Seyff,"Univ. of Zurich, Zurich, Switzerland; Tech. Univ. Munchen, Munich, Germany; FHNW, Univ. of Zurich, Zurich, Switzerland",2016 IEEE 24th International Requirements Engineering Conference (RE),,2016,,,96,105,"Users of the Twitter microblogging platform share a vast amount of information about various topics through short messages on a daily basis. Some of these so called tweets include information that is relevant for software companies and could, for example, help requirements engineers to identify user needs. Therefore, tweets have the potential to aid in the continuous evolution of software applications. Despite the existence of such relevant tweets, little is known about their number and content. In this paper we report on the results of an exploratory study in which we analyzed the usage characteristics, content and automatic classification potential of tweets about software applications by using descriptive statistics, content analysis and machine learning techniques. Although the manual search of relevant information within the vast stream of tweets can be compared to looking for a needle in a haystack, our analysis shows that tweets provide a valuable input for software companies. Furthermore, our results demonstrate that machine learning techniques have the capacity to identify and harvest relevant information automatically.",,,10.1109/RE.2016.67,,https://ieeexplore.ieee.org.ezproxy.cdigital.uv.mx:8443/stamp/stamp.jsp?arnumber=7765515,,Software;Twitter;Companies;Stakeholders;Automation;Requirements engineering;Needles,DP industry;learning (artificial intelligence);pattern classification;social networking (online);software engineering;statistical analysis,Twitter microblogging platform;tweets;software companies;software applications;automatic classification potential;descriptive statistics;content analysis;machine learning,,32,,28,,,,,IEEE,IEEE Conferences
An Empirical Investigation to Overcome Class-Imbalance in Inspection Reviews,M. Singh; G. S. Walia; A. Goswami,"Dept. of Comput. Sci., North Dakota State Univ., Fargo, ND, USA; Dept. of Comput. Sci., North Dakota State Univ., Fargo, ND, USA; Dept. of Comput. Sci., Bennett Univ., Greater Noida, India",2017 International Conference on Machine Learning and Data Science (MLDS),,2017,,,15,22,Background: software inspection results in reviews that report the presence of faults. Requirements author must manually read through the reviews and differentiate between true-faults and false-positives. Problem: post-inspection decisions (fault or nonfault) are difficult and time consuming. It is difficult to employ machine learning (ML) techniques directly to raw (unstructured) data because of class imbalance problem and possible fault-slippage through misclassification of fault. Aim: The aim of this research is to solve this problem with the help of ensemble approach and priority analysis to achieve significant accuracy in determining true-fault and false-positive reviews without losing any listed fault. Method: We conducted empirical experiment using two trained models (with reviews from inspection domain vs. movies domain) to address class imbalance problem. Our approach uses ensemble methods to develop classification confidence of inspection reviews and assigns them to appropriate priority class. Results: The results showed that movies trained model performed better than inspection trained and restricted any possible fault-slippage.,,,10.1109/MLDS.2017.15,,https://ieeexplore.ieee.org.ezproxy.cdigital.uv.mx:8443/stamp/stamp.jsp?arnumber=8320253,Fault priority;class imbalance;ensemble;sampling;inspections reviews;part of speech;machine learning;fault slippage,Inspection;Motion pictures;Training;Testing;Software;Speech;Natural languages,inspection;learning (artificial intelligence);pattern classification;software fault tolerance,software inspection results;machine learning techniques;raw data;class imbalance problem;false-positive reviews;class-imbalance;fault-slippage;fault misclassification;inspection review classification,,1,,29,,,,,IEEE,IEEE Conferences